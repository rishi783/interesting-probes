
     int orangesRotting(vector<vector<int>>& grid) {
       
     vector<int> dir={-1,0,1,0,-1};  // to check for the all four positions from a cell 
     queue<pair<int,int>> q;
     int fresh=0,ans=-1;
      for(int i=0;i<grid.size();i++)
      {
          for(int j=0;j<grid[0].size();j++)
          {
              if(grid[i][j]==2) q.push({i,j});  // have a queue full of rotten oranges position
              if(grid[i][j]==1) fresh++;       // no of fresh oranges
          }
      }
      while(!q.empty())
      {
         int s=q.size();
         while(s--)  // the current queue size helps to increase the ans variable because when the current queue is finished the number of required days(or minutes) is increased
         {           // and the next set of new rotten orange positions take their place in the queue after the initial queue rots the neigboring fresh oranges.
          pair<int,int> p=q.front();
          q.pop();
          for(int i=0;i<4;i++)
          {
            int x=p.first+dir[i];      // navigates to all the four position : bottom right top and left in that order
            int y=p.second+dir[i+1];
            if(x>=0 && y>=0 && x<grid.size() && y<grid[0].size() && grid[x][y]==1)
            {
                grid[x][y]=2;
                q.push({x,y});
                fresh--;      //the fresh oranges are decresing as it is rotten because of the neigboring rotten oranges
            }
          }
        }
          ans++;       // as the first set of rotten oranges are over the number of days (or minutes) are increased
      }
      if(fresh>0) return -1;  // if there is still fresh oranges then no way it can be rotten so -1
      if(ans==-1) return 0;
      else return ans;
    }
   // main function is just the input matrix;
